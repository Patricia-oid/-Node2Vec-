# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\courses\programs\node2vec\window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from window import Ui_MainWindow
from relation_embedding import RelationEmbedding


class QSSLoader:
    def __init__(self):
        pass

    @staticmethod
    def read_qss_file(qss_file_name):
        with open(qss_file_name, 'r',  encoding='UTF-8') as file:
            return file.read()

class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.retranslateUi(self)
        self.r=RelationEmbedding()
        self.inputBtn.clicked.connect(self.load_data_from_csv)   # 链接
        self.pushButton.clicked.connect(self.embedd_and_cluster)
        self.deter=0
        self.is_weighted=self.comboBox.currentIndex()
        print(self.is_weighted)

    def load_data_from_csv(self):
        filename = QFileDialog.getOpenFileName(
            None, "导入csv文件", "",
            "Data files(*.csv);;All files (*.*)")[0]
        if (filename):
            self.r.load_data(filename,self.is_weighted)
            self.lineEdit_4.setText(filename)
            self.deter=1
    
    def embedd_and_cluster(self):
        if(self.deter):
            dimension=int(self.lineEdit.text())
            epochs=int(self.lineEdit_2.text())
            window_size=int(self.lineEdit_3.text())
            walk_length=int(self.lineEdit_5.text())
            num_walks=int(self.lineEdit_6.text())
            workers=int(self.lineEdit_7.text())
            self.r.embedding_and_clustering(num_walks,walk_length,window_size,dimension,epochs,workers)
            self.r.lower_dimension()
            self.r.final_visualize()

if __name__ == "__main__":

    app = QtWidgets.QApplication(sys.argv)
    myWindow = MainWindow()
    style_file = './style.qss'
    style_sheet = QSSLoader.read_qss_file(style_file)
    myWindow.setStyleSheet(style_sheet)
    myWindow.show()

    sys.exit(app.exec_())


    

